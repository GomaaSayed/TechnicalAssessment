@page
@model AddInvoiceModel
@{
    ViewData["Title"] = "Add Invoice";
}

<div class="container mt-5">
    <div class="card bg-light">
        <!-- Card Header -->
        <div class="card-header bg-dark text-white">
            <h3 class="mb-0">Add Invoice</h3>
        </div>

        <!-- Card Body -->
        <div class="card-body">
            <form id="invoiceForm">
                <!-- Form Fields -->
                <div class="row mb-3">
                    <div class="col-lg-6">
                        <label for="invoiceDate" class="form-label">Invoice Date:</label>
                        <input type="date" id="invoiceDate" name="InvoiceDate" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")" required />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-lg-12">
                        <label for="description" class="form-label">Description:</label>
                        <textarea id="description" name="Description" class="form-control" rows="3" required></textarea>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-lg-6">
                        <label for="totalAmount" class="form-label">Total Amount:</label>
                        <input type="number" id="totalAmount" name="TotalAmount" class="form-control" step="0.01" readonly />
                    </div>
                </div>
                <div id="messageDiv" class="mt-3"></div>
                <!-- Buttons -->
                <div class="row mb-4">
                    <div class="col-lg-6">
                        <button type="button" id="addItemBtn" class="btn btn-primary w-100">Add Item</button>
                    </div>
                    <div class="col-lg-6">
                        <button type="button" id="submitInvoiceBtn" class="btn btn-success w-100">Submit Invoice</button>
                    </div>
                </div>

                <!-- Table -->
                <h4 class="mb-3">Invoice Items</h4>
                <table class="table table-striped" id="itemsTable">
                    <thead class="table-dark">
                        <tr>
                            <th>Item</th>
                            <th>Count</th>
                            <th>Price</th>
                            <th>Total</th>
                          

                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Dynamic rows will be added here -->
                    </tbody>
                </table>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const itemsTable = document.getElementById("itemsTable").querySelector("tbody");
        const addItemBtn = document.getElementById("addItemBtn");
        const submitInvoiceBtn = document.getElementById("submitInvoiceBtn");
        const totalAmountField = document.getElementById("totalAmount");
        const invoiceForm = document.getElementById("invoiceForm");
        const messageDiv = document.getElementById("messageDiv");
        const sampleItems = [
            { id: 1, name: "Item 1", price: 10.00 },
            { id: 2, name: "Item 2", price: 20.00 },
            { id: 3, name: "Item 3", price: 15.00 }
        ];

    
        addItemBtn.addEventListener("click", function () {
            messageDiv.innerHTML = ``;

 
            const existingItemIds = Array.from(itemsTable.querySelectorAll(".item-dropdown")).map(dropdown => dropdown.value);
            if (existingItemIds.includes("")) {
                console.log(existingItemIds)
                messageDiv.innerHTML = `<div class="alert alert-warning">Please select an item before adding a new row.</div>`;
                return;
            }
            console.log(existingItemIds)
            const row = document.createElement("tr");

            const dropdownOptions = sampleItems.map(item => `<option value="${item.id}" data-price="${item.price}">${item.name}</option>`).join("");

            row.innerHTML = `
            <td>
                <select class="form-control item-dropdown">
                    <option value="" disabled selected>Select Item</option>
                    ${dropdownOptions}
                </select>
            </td>
            <td><input type="number" class="form-control item-count" min="1" required /></td>
            <td><input type="number" class="form-control item-price" readonly /></td>
            <td><input type="number" class="form-control item-total" readonly /></td>
          
            <td><button type="button" class="btn btn-danger delete-item-btn">Delete</button></td>
        `;

            itemsTable.appendChild(row);

            const dropdown = row.querySelector(".item-dropdown");
            const countInput = row.querySelector(".item-count");
            const priceInput = row.querySelector(".item-price");
            const totalInput = row.querySelector(".item-total");
            const deleteBtn = row.querySelector(".delete-item-btn");

            dropdown.addEventListener("change", function () {
                const selectedOption = dropdown.options[dropdown.selectedIndex];
                const price = selectedOption.dataset.price || 0;

            
                const selectedItemId = dropdown.value;
                if (existingItemIds.includes(selectedItemId)) {
                    messageDiv.innerHTML = `<div class="alert alert-danger">This item has already been added.</div>`;
                    dropdown.value = ""; 
                    priceInput.value = "";
                    totalInput.value = "";
                    return;
                }

                priceInput.value = price;
                calculateTotal();
            });

            countInput.addEventListener("input", calculateTotal);

            function calculateTotal() {
                const count = parseInt(countInput.value) || 0;
                const price = parseFloat(priceInput.value) || 0;
                const total = count * price;
                totalInput.value = total.toFixed(2);
                updateTotalAmount();
            }

          
            deleteBtn.addEventListener("click", function () {
                row.remove();
                updateTotalAmount();
            });

            function updateTotalAmount() {
                let totalAmount = 0;
                itemsTable.querySelectorAll(".item-total").forEach(input => {
                    totalAmount += parseFloat(input.value) || 0;
                });
                totalAmountField.value = totalAmount.toFixed(2);
            }
        });


        submitInvoiceBtn.addEventListener("click", async function () {
            if (!validateItemsTable()) {
                return; 
            }
            const invoice = {
                InvoiceDate: document.getElementById("invoiceDate").value,
                Description: document.getElementById("description").value,
                TotalAmount: parseFloat(totalAmountField.value),
                Items: Array.from(itemsTable.querySelectorAll("tr")).map(row => ({
                    ItemId: parseInt(row.querySelector(".item-dropdown").value),
                    Quantity: parseInt(row.querySelector(".item-count").value),
                    Price: parseFloat(row.querySelector(".item-price").value),
                    Total: parseFloat(row.querySelector(".item-total").value),          
                }))
            };
            
         
            if ( !invoice.InvoiceDate || !invoice.Items.length) {
                messageDiv.innerHTML = `<div class="alert alert-danger">Please fill all required fields.</div>`;
                return;
            }

            try {
                const response = await fetch('https://localhost:7214/api/Invoice/AddInvoice', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + localStorage.getItem('authToken') },
                  
                    body: JSON.stringify(invoice)
                });
                if (response.ok) {
                    const result = await response.json();
                    messageDiv.innerHTML = `<div class="alert alert-success">${result.message}</div>`;
                    resetForm();
                } else {
                    const error = await response.json();
                    messageDiv.innerHTML = `<div class="alert alert-danger">Error: ${JSON.stringify(error)}</div>`;
                }
            } catch (err) {
                console.error(err);
                alert("An error occurred while submitting the invoice.");
            }
        });
        function resetForm() {
            invoiceForm.reset();
            itemsTable.innerHTML = ""; 
        }
        function validateItemsTable() {
            const rows = itemsTable.querySelectorAll("tr");
            if (rows.length === 0) {
                return false; 
            }

            for (const row of rows) {
                const dropdown = row.querySelector(".item-dropdown");
                const countInput = row.querySelector(".item-count");
                const priceInput = row.querySelector(".item-price");

                if (!dropdown || !dropdown.value) {
                    messageDiv.innerHTML = `<div class="alert alert-danger">Please select an item in the table.</div>`;
                    return false;
                }

                if (!countInput || countInput.value <= 0) {
                    messageDiv.innerHTML = `<div class="alert alert-danger">Please enter a valid count for all items.</div>`;
                    return false;
                }

                if (!priceInput || priceInput.value <= 0) {
                    messageDiv.innerHTML = `<div class="alert alert-danger">Please ensure the price is valid</div>`;
                    return false;
                }
            }

            return true; 
        }
    });
</script>

