@page
@model InvoicesModel
@{
    ViewData["Title"] = "Privacy Policy";
}

<div class="container mt-5">
    <div class="card bg-light">
        <!-- Card Header -->
        <div class="card-header bg-dark text-white">
            <h3 class="mb-0">  <button id="refreshBtn" class="btn btn-primary">Show All Invoices</button></h3>
        </div>

        <!-- Card Body -->
        <div class="card-body">
            <!-- Message display area (for errors or success) -->
            <div id="message" class="alert" style="display: none;"></div>

            <!-- Invoice Table -->
            <table class="table table-bordered" id="invoicesTable">
                <thead>
                    <tr>
                      
                        <th>Invoice Number</th>
                        <th>Date</th>
                        <th>Total Amount</th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
             
                </tbody>
            </table>
        </div>
    </div>
</div>




<div class="modal fade" id="itemsModal" tabindex="-1" aria-labelledby="itemsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="itemsModalLabel">Invoice Items</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <table class="table table-bordered" id="itemsTable">
                    <thead>
                        <tr>
                            <th>Item Name</th>
                            <th>Price</th>
                            <th>Count</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
                       
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>




@section Scripts {
    <script>
        const messageDiv = document.getElementById("message");
        const refreshBtn = document.getElementById("refreshBtn");
        const invoicesTable = document.getElementById("invoicesTable").getElementsByTagName('tbody')[0];

    
       
        async function fetchInvoices() {
            try {
              
                const response = await fetch('https://localhost:7214/api/Invoice/GetAllInvoices', {
                    method: 'GET',
                    headers: {
                     
                        'Authorization': 'Bearer ' + localStorage.getItem('authToken'),
                        'Content-Type': 'application/json'
                    }
                });

           
                if (response.ok) {
                    const data = await response.json();
               
                    updateTable(data);
                } else {
             
                    const error = await response.json();
                    showMessage("Error: " + error.message, "alert-danger");
                }
            } catch (err) {
               
                showMessage("An error occurred: " + err.message, "alert-danger");
            }
        }

       
        function updateTable(data) {
            const tableBody = document.getElementById('invoiceTableBody');
            tableBody.innerHTML = ""; 

            data.forEach((invoice, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${invoice.invoiceNo}</td>
                    <td>${new Date(invoice.invoiceDate).toISOString().slice(0, 10)}</td>
                    <td>${invoice.totalAmount.toFixed(2)}</td>
                    <td>${invoice.description}</td>
                    <td><button class="btn btn-primary" onclick="showInvoiceItems('${invoice.id}')">Show Items</button></td>
                `;
                tableBody.appendChild(row);
            });
        }

        function showMessage(message, alertType) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('alert', alertType);
            messageDiv.textContent = message;

            const messageContainer = document.getElementById('messageContainer'); 
            messageContainer.innerHTML = ''; 
            messageContainer.appendChild(messageDiv);

           
            setTimeout(() => {
                messageDiv.remove();
            }, 5000);
        }

        function updateTable(invoices) {
            invoicesTable.innerHTML = ''; 

            if (invoices.length === 0) {
                invoicesTable.innerHTML = `<tr><td colspan="5" class="text-center">No invoices found.</td></tr>`;
                return;
            }

            invoices.forEach((invoice, index) => {
                const row = document.createElement("tr");

                row.innerHTML = `
           
            <td>${invoice.invoiceNo}</td>
            <td>${new Date(invoice.invoiceDate).toISOString().slice(0, 10)}</td>
            <td>${invoice.totalAmount.toFixed(2)}</td>
            <td>${invoice.description}</td>
                     <td> <button class="btn btn-primary" onclick="showInvoiceItems('${invoice.id}')">Show Items</button></td> `;

                invoicesTable.appendChild(row);
            });
        }

   
        function showMessage(message, alertClass) {
            messageDiv.innerHTML = message;
            messageDiv.className = `alert ${alertClass}`;
            messageDiv.style.display = "block";

            setTimeout(() => {
                messageDiv.style.display = "none";
            }, 3000);
        }

    
        refreshBtn.addEventListener("click", fetchInvoices);


        fetchInvoices();
       
        async function showInvoiceItems(invoiceId) {
            try {
                const response = await fetch(`https://localhost:7214/api/Invoice/GetAllInvoiceDetails/${invoiceId}`, {
                    method: 'GET',
                    headers: {
                       
                        'Authorization': 'Bearer ' + localStorage.getItem('authToken'),
                        'Content-Type': 'application/json'
                    }
                });

                if (response.ok) {
                    const invoiceDetails = await response.json();
                    populateItemsTable(invoiceDetails);  

                    const modal = new bootstrap.Modal(document.getElementById('itemsModal'));
                    modal.show();  
                } else {
                    console.error('Failed to fetch invoice items');
                }
            } catch (error) {
                console.error('Error fetching invoice items:', error);
            }
        }

        function populateItemsTable(invoiceDetails) {
            const itemsTableBody = document.querySelector('#itemsTable tbody');
            itemsTableBody.innerHTML = '';  

            if (invoiceDetails.length > 0) {
                invoiceDetails.forEach(item => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${item.itemName}</td>
                        <td>${item.price}</td>
                                <td>${item.quantity}</td>
                                <td>${(item.price * item.quantity).toFixed(2)}</td>
                    `;
                    itemsTableBody.appendChild(row);
                });
            } else {
                const row = document.createElement('tr');
                row.innerHTML = '<td colspan="4" class="text-center">No items found</td>';
                itemsTableBody.appendChild(row);
            }
        }

     


    </script>
}
